/*
 * QALIPSIS
 * Copyright (C) 2022 AERIS IT Solutions GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package io.qalipsis.core.head.model

import io.micronaut.core.annotation.Introspected
import io.qalipsis.api.constraints.PositiveDuration
import io.qalipsis.api.query.QueryAggregationOperator
import io.qalipsis.core.head.report.DataType
import io.qalipsis.core.head.report.SharingMode
import io.swagger.v3.oas.annotations.media.Schema
import java.time.Duration
import javax.validation.Valid
import javax.validation.constraints.NotBlank
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 * External representation of the creation of a data series.
 *
 * @author Eric Jess√©
 */
@Introspected
@Schema(
    name = "Data series creation details",
    title = "Details to create a new data series"
)
internal data class DataSeriesCreationRequest(
    @field:Schema(description = "Display name of the time series, should be unique into a tenant", required = true)
    @field:NotBlank
    @field:Size(min = 3, max = 200)
    val displayName: String,

    @field:Schema(description = "Sharing mode with the other members of the tenant", required = true)
    val sharingMode: SharingMode = SharingMode.READONLY,

    @field:Schema(
        description = "Nature of data to fetch, corresponding to the different data types generated by tests",
        required = true
    )
    val dataType: DataType,

    @field:Schema(description = "Name of the event or meter to use", required = true)
    @field:NotBlank
    @field:Size(min = 3, max = 100)
    val valueName: String,

    @field:Schema(description = "Optional color to set, as an hexadecimal value", required = false)
    @field:Pattern(regexp = "^#[0-9a-fA-F]{6}$")
    val color: String?,

    @field:Schema(
        description = "Set of filters to apply to restrict the records eligible for the data series",
        required = false
    )
    val filters: Set<@Valid DataSeriesFilter>,

    @field:Schema(
        description = "Optional name of the field to use from the event or meter (ex: duration, count)",
        required = false
    )
    @field:Size(max = 60)
    val fieldName: String?,

    @field:Schema(
        description = "Aggregation operation to perform on the values pointed out by the field name,\n" +
                " * in order to scale the values with the time, defaults to count", required = false
    )
    val aggregationOperation: QueryAggregationOperator?,

    @field:PositiveDuration
    @field:Schema(
        description = "Duration to aggregate the values for scaling, as an ISO period (ex: PT10S), let empty for auto-mode",
        example = "10.000000000",
        required = false
    )
    val timeframeUnit: Duration?,

    @field:Schema(
        description = "Optional display format to display the value, depending on its types",
        required = false
    )
    @field:Size(max = 20)
    val displayFormat: String?
)
