package io.evolue.api.steps

import cool.graph.cuid.Cuid
import io.evolue.api.context.CorrelationRecord
import io.evolue.api.context.StepName
import io.evolue.api.scenario.ScenarioSpecification
import io.micronaut.core.annotation.Introspected
import java.time.Duration
import javax.validation.constraints.NotBlank

/**
 * Specification for a [io.evolue.core.factories.steps.CorrelationStep].
 *
 * @author Eric Jessé
 */
@Introspected
data class CorrelationStepSpecification<INPUT, OUTPUT>(
        val primaryKeyExtractor: CorrelationRecord<INPUT>.() -> Any?,
        val secondaryKeyExtractor: CorrelationRecord<out Any?>.() -> Any?,
        val secondaryStepName: @NotBlank StepName
) : AbstractStepSpecification<INPUT?, OUTPUT?, CorrelationStepSpecification<INPUT, OUTPUT>>() {

    var cacheTimeout: Duration = Duration.ofMinutes(1)

}

/**
 * Correlates the records coming from an earlier step with the ones generated by the specified specification.
 * Correlation keys are used in order to be able to map the record from each source together.
 *
 * @param on function to execute on the records from the local earlier step to extract the correlation key.
 * @param with specification of the step that should generate the remote records.
 * @param having function to execute on the remote records to extract the correlation key.
 *
 * @author Eric Jessé
 */
fun <INPUT, OTHER_INPUT : Any?> StepSpecification<*, INPUT, *>.correlate(on: CorrelationRecord<INPUT>.() -> Any?,
                                                                         with: ScenarioSpecification.() -> AbstractStepSpecification<*, OTHER_INPUT, *>,
                                                                         having: CorrelationRecord<OTHER_INPUT>.() -> Any?): CorrelationStepSpecification<INPUT, Pair<INPUT, OTHER_INPUT>> {
    val secondaryStep = scenario!!.with()
    if (secondaryStep.name.isNullOrBlank()) {
        secondaryStep.name = Cuid.createCuid()
    }
    this.scenario!!.register(secondaryStep)
    return correlate(on, secondaryStep.name!!, having)
}

/**
 * Correlates the records coming from an earlier step with the ones generated by step with the specified name.
 * Correlation keys are used in order to be able to map the record from each source together.
 *
 * @param on function to execute on the records from the local earlier step to extract the correlation key.
 * @param with name of the step, which should have be specified earlier in the same scenario.
 * @param having function to execute on the remote records to extract the correlation key.
 *
 * @author Eric Jessé
 */
fun <INPUT, OTHER_INPUT : Any?> StepSpecification<*, INPUT, *>.correlate(on: CorrelationRecord<INPUT>.() -> Any?,
                                                                         with: String,
                                                                         having: CorrelationRecord<OTHER_INPUT>.() -> Any?): CorrelationStepSpecification<INPUT, Pair<INPUT, OTHER_INPUT>> {
    val step = CorrelationStepSpecification<INPUT, Pair<INPUT, OTHER_INPUT>>(on,
            having as CorrelationRecord<out Any?>.() -> Any?, with)
    this.add(step)
    return step
}
