package io.evolue.api.steps

import cool.graph.cuid.Cuid
import io.evolue.api.context.CorrelationRecord
import io.evolue.api.context.StepName
import io.evolue.api.scenario.ScenarioSpecification
import io.micronaut.core.annotation.Introspected
import java.time.Duration
import javax.validation.constraints.NotBlank

/**
 * Specification for a [io.evolue.core.factories.steps.LeftJoinStep].
 *
 * @author Eric Jessé
 */
@Introspected
data class LeftJoinStepSpecification<INPUT, OUTPUT>(
        val primaryKeyExtractor: (CorrelationRecord<INPUT>) -> Any?,
        val secondaryKeyExtractor: (CorrelationRecord<out Any?>) -> Any?,
        val secondaryStepName: @NotBlank StepName
) : AbstractStepSpecification<INPUT?, OUTPUT?, LeftJoinStepSpecification<INPUT, OUTPUT>>() {
    var cacheTimeout: Duration = Duration.ZERO
}

/**
 * Correlates the records coming from an earlier step with the ones generated by the specified specification.
 * Correlation keys are used in order to be able to map the record from each source together.
 *
 * @param using function to execute on the records from the local earlier step to extract the correlation key.
 * @param on specification of the step that should generate the remote records.
 * @param having function to execute on the remote records to extract the correlation key.
 *
 * @author Eric Jessé
 */
fun <INPUT, OTHER_INPUT> StepSpecification<*, INPUT, *>.leftJoin(using: (CorrelationRecord<INPUT>) -> Any?,
                                                                 on: (scenario: ScenarioSpecification) -> StepSpecification<*, OTHER_INPUT, *>,
                                                                 having: (CorrelationRecord<OTHER_INPUT>) -> Any?): LeftJoinStepSpecification<INPUT, Pair<INPUT, OTHER_INPUT>> {

    // In order to connect to a right step, we add a tube to it, which will serve as connection to the left join step.
    val secondaryStep = on(scenario!!)
    if (secondaryStep.name.isNullOrBlank()) {
        secondaryStep.name = Cuid.createCuid()
    }

    @Suppress("UNCHECKED_CAST")
    val step =
        LeftJoinStepSpecification<INPUT, Pair<INPUT, OTHER_INPUT>>(using, having as CorrelationRecord<*>.() -> Any?,
                secondaryStep.name!!)
    this.add(step)
    return step
}

/**
 * Correlates the records coming from an earlier step with the ones generated by step with the specified name.
 * Correlation keys are used in order to be able to map the record from each source together.
 *
 * @param using function to execute on the records from the local earlier step to extract the correlation key.
 * @param on name of the step, which should have be specified earlier in the same scenario.
 * @param having function to execute on the remote records to extract the correlation key.
 *
 * @author Eric Jessé
 */
fun <INPUT, OTHER_INPUT> StepSpecification<*, INPUT, *>.leftJoin(using: (CorrelationRecord<INPUT>) -> Any?, on: String,
                                                                 having: (CorrelationRecord<OTHER_INPUT>) -> Any?): LeftJoinStepSpecification<INPUT, Pair<INPUT, OTHER_INPUT>> {

    @Suppress("UNCHECKED_CAST")
    val step = LeftJoinStepSpecification<INPUT, Pair<INPUT, OTHER_INPUT>>(using,
            having as CorrelationRecord<out Any?>.() -> Any?, on)
    this.add(step)
    return step
}