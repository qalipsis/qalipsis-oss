/**
 * An interface that describes `series` data received from and to `/data-series` endpoint.
 */
export interface DataSeries {
    /**
     * Identifier of the data series
     */
    reference: string;

    /**
     * Last update of the data series
     */
    version: string;

    /**
     * Name of the user, who created the data series
     */
    creator: string;

    /**
     * Display name of the time series, should be unique into a tenant
     */
    displayName: string;

    /**
     * Name of the event or meter to use
     */
    valueName: string;

    /**
     * Nature of data to fetch, corresponding to the different data types generated by tests
     */
    dataType: DataType;

    /**
     * Sharing mode with the other members of the tenant
     */
    sharingMode?: SharingMode;

    /**
     * Optional color to set, as an hexadecimal value
     */
    color?: string;

    /**
     * Set of filters to apply to restrict the records eligible for the data series
     */
    filters?: DataSeriesFilter[];

    /**
     * Optional name of the field to use from the event or meter (ex: duration, count)
     */
    fieldName?: string;

    /**
     * The opacity of the color
     */
    colorOpacity?: number;

    /**
     * Aggregation operation to perform on the values pointed out by the field name,
     * "*" in order to scale the values with the time, defaults to count
     */
    aggregationOperation?: QueryAggregationOperator;

    /**
     * Duration to aggregate the values for scaling,
     * as an ISO period (ex: PT10S), let empty for auto-mode
     */
    timeframeUnit?: number;

    /**
     * Optional display format to display the value, depending on its types
     */
    displayFormat?: string;
}

/**
 * An interface for the data series option
 */
export interface DataSeriesOption extends DataSeries {
    /**
     * A flag to indicate if the options is selected
     */
    isActive: boolean
}

/**
 * Data series creation details.
 * 
 * @description
 * The properties are the same as DataSeries, but without reference and creator.
 * 
 * @see DataSeries
 */
export interface DataSeriesCreationRequest extends Omit<DataSeries, 'reference' | 'creator' | 'version'> {
}


/**
* The sharing mode with the other members of the tenant.
*/
export enum SharingMode {
    READONLY = "READONLY",
    WRITE = "WRITE",
    NONE = "NONE"
}

/**
 * Type of data to fetch
 */
export enum DataType {
    METERS = "METERS",
    EVENTS = "EVENTS"
}

/**
 * Details of a filter to restrict the eligible data for a data series
 */
export interface DataSeriesFilter {
    /**
     * Name of the field to apply the filter
     */
    name: string;

    /**
     * Operator to perform on the values to filter records
     */
    operator: QueryClauseOperator;

    /**
     * Can contain wildcards signs * if the operator supports it
     */
    value: string;
}

/**
 * Operator to apply on a clause for a query.
 */
export enum QueryClauseOperator {
    IS = "IS",
    IS_NOT = "IS_NOT",
    IS_IN = "IS_IN",
    IS_NOT_IN = "IS_NOT_IN",
    IS_LIKE = "IS_NOT_IN",
    IS_NOT_LIKE = "IS_NOT_LIKE",
    IS_GREATER_THAN = "IS_GREATER_THAN",
    IS_LOWER_THAN = "IS_LOWER_THAN",
    IS_GREATER_OR_EQUAL_TO = "IS_GREATER_OR_EQUAL_TO",
    IS_LOWER_OR_EQUAL_TO = "IS_LOWER_OR_EQUAL_TO"
}

/**
 * The query aggregation operators
 */
export enum QueryAggregationOperator {
    AVERAGE = "AVERAGE",
    MAX = "MAX",
    MIN = "MIN",
    SUM = "SUM",
    STANDARD_DEVIATION = "STANDARD_DEVIATION",
    COUNT = "COUNT",
    PERCENTILE_99_9 = "PERCENTILE_99_9",
    PERCENTILE_99 = "PERCENTILE_99",
    PERCENTILE_75 = "PERCENTILE_75"
}

/**
 * An interface that describes the data displayed on the series table.
 */
export interface DataSeriesTableData extends DataSeries {
    /**
     * The key for the row selection.
     * 
     * @remarks
     * "key" is the default property name for the row selection 
     * from the ant design table component.
     */
    key: string;

    /**
     * The display text for the sharing mode.
     */
    sharedText: string;

    /**
     * The formatted timeframe from the timeframeUnit value.
     */
    formattedTimeframe: FormattedTimeframe;

    /**
     * The list of the field name to apply the filter.
     */
    filterNames: string[];

    /**
     * A flag to check if the data series is disabled for editing.
     */
    disabled: boolean;
}


/**
 * The data series patch types
 */
export enum DataSeriesPatchTypeEnum {
    DISPLAY_NAME = "display-name",
    SHARING_MODE = "sharing-mode",
    COLOR = "color",
    FILTERS = "filters",
    FIELD_NAME = "field-name",
    VALUE_NAME = "value-name",
    AGGREGATION = "aggregation",
    DISPLAY_FORMAT = "display-format",
    TIME_FRAME = "timeframe"
}

/**
 * The type for the data series patch request.
 */
export type DataSeriesPatch =
    ValueNameDataSeriesPatch |
    DisplayNameDataSeriesPatch |
    ColorDataSeriesPatch |
    FieldNameDataSeriesPatch |
    DisplayFormatDataSeriesPatch |
    SharingModeDataSeriesPatch |
    FilterDataSeriesPatch |
    AggregationDataSeriesPatch |
    TimeframeDataSeriesPatch;

/**
 * The base data series patch interface.
 */
export interface BaseDataSeriesPatch<T extends DataSeriesPatchTypeEnum> {
    /**
     * The type for the data series patch request.
     * 
     * @see DataSeriesPatchTypeEnum
     */
    type: T;
}

/**
 * Patch to update the name of the used meter/event
 */
export interface ValueNameDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.VALUE_NAME> {
    valueName: string;
}

/**
 * Patch to update the display name of a data series
 */
export interface DisplayNameDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.DISPLAY_NAME> {
    displayName: string;
}

/**
 * Patch to update the display color of a data series
 */
export interface ColorDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.COLOR> {
    color: string;
    opacity?: number;
}

/**
 * Patch to update the field name of a data series
 */
export interface FieldNameDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.FIELD_NAME> {
    fieldName: string;
}

/**
 * Patch to update the displayFormat property of a data series
 */
export interface DisplayFormatDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.DISPLAY_FORMAT> {
    displayFormat: string;
}

/**
 * Patch to update the sharing mode of a data series
 */
export interface SharingModeDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.SHARING_MODE> {
    sharingMode: SharingMode;
}

/**
 * Patch to update the filters of a data series
 */
export interface FilterDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.FILTERS> {
    filters: DataSeriesFilter[];
}

/**
 * Patch to update the aggregation operation of a data series
 */
export interface AggregationDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.AGGREGATION> {
    operation: QueryAggregationOperator;
}

/**
 * Patch to update the duration to aggregate the values of a data series for scaling
 */
export interface TimeframeDataSeriesPatch
    extends BaseDataSeriesPatch<DataSeriesPatchTypeEnum.TIME_FRAME> {
    timeframe: number;
}

/**
 * Data series creation details.
 * 
 * @description
 * The properties are the same as DataSeries, but without reference and creator.
 * 
 * @see DataSeries
 */
export interface DataSeriesCreationRequest extends Omit<DataSeries, "reference" | "creator" | "version"> {
}

export interface DataField {
    name: string;
    type: DataFieldType;
    unit?: string;
}

/**
 * Type of a field of time-series data.
 */
export enum DataFieldType {
    STRING = "STRING",
    NUMBER = "NUMBER",
    BOOLEAN = "BOOLEAN",
    OBJECT = "OBJECT",
    DATE = "DATE",
}

/**
 * Data series state for the series store.
 */
export interface DataSeriesState {
    /**
     * The series table state
     */
    seriesTable: {
        /**
         * Sorting
         */
        sort: string,

        /**
         * Filter
         */
        filter: string,

        /**
         * Current page index.
         */
        currentPageIndex: number,

        /**
         * The page size of the table.
         */
        size: number,

        /**
         * The total elements of the table.
         */
        totalElements: number,

        /**
         * The display data on the table.
         */
        displayData: DataSeriesTableData[]
    }
}

export interface SeriesForm {
    displayName: string;
    sharingMode: SharingMode;
    fieldName: string;
    dataType: DataType;
    eventName: string;
    aggregation: QueryAggregationOperator;
    timeframe: number;
    timeframeUnit: TimeframeUnit;
    colorHex: string;
    colorOpacity: number;
    filters: DataSeriesFilter[];
    displayFormat: string
}